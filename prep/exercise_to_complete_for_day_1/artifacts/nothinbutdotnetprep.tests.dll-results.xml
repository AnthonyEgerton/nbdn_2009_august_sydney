<?xml version="1.0" encoding="utf-8"?><report-result xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" date="2009-08-03T08:45:21.9389588+10:00"><counter duration="0.21700000000000003" run-count="24" success-count="21" failure-count="3" ignore-count="0" skip-count="0" assert-count="66" /><assemblies><assembly name="nothinbutdotnetprep.tests" location="file:///c:/course/prep/exercise_to_complete_for_day_1/product/nothinbutdotnetprep.tests/bin/debug/nothinbutdotnetprep.tests.DLL" full-name="nothinbutdotnetprep.tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"><counter duration="0.21700000000000003" run-count="24" success-count="21" failure-count="3" ignore-count="0" skip-count="0" assert-count="66" /><version major="1" minor="0" build="0" revision="0" /><namespaces><namespace name="nothinbutdotnetprep"><counter duration="0.21700000000000003" run-count="24" success-count="21" failure-count="3" ignore-count="0" skip-count="0" assert-count="66" /><namespaces><namespace name="nothinbutdotnetprep.tests"><counter duration="0.21700000000000003" run-count="24" success-count="21" failure-count="3" ignore-count="0" skip-count="0" assert-count="66" /><namespaces /><fixtures><fixture name="MovieLibrarySpecs+when_sorting_movies" type="nothinbutdotnetprep.tests.MovieLibrarySpecs+when_sorting_movies"><tear-down name="TestFixtureTearDown" result="success" duration="0" memory="0"><console-out /><console-error /></tear-down><set-up name="TestFixtureSetUp" result="success" duration="0.0069999999999999993" memory="8192"><console-out /><console-error /></set-up><counter duration="0.043000000000000003" run-count="5" success-count="4" failure-count="1" ignore-count="0" skip-count="0" assert-count="32" /><description /><runs><run name="MovieLibrarySpecs+when_sorting_movies.setup.should_be_able_to_sort_all_movies_by_title_descending.tear_down" result="success" assert-count="8" duration="0.04" memory="25120"><invokers /><warnings /><asserts /><Description /><console-out /><console-error /></run><run name="MovieLibrarySpecs+when_sorting_movies.setup.should_be_able_to_sort_all_movies_by_title_ascending.tear_down" result="success" assert-count="8" duration="0.001" memory="8192"><invokers /><warnings /><asserts /><Description /><console-out /><console-error /></run><run name="MovieLibrarySpecs+when_sorting_movies.setup.should_be_able_to_sort_all_movies_by_date_published_descending.tear_down" result="success" assert-count="8" duration="0.001" memory="8192"><invokers /><warnings /><asserts /><Description /><console-out /><console-error /></run><run name="MovieLibrarySpecs+when_sorting_movies.setup.should_be_able_to_sort_all_movies_by_date_published_ascending.tear_down" result="success" assert-count="8" duration="0" memory="8192"><invokers /><warnings /><asserts /><Description /><console-out /><console-error /></run><run name="MovieLibrarySpecs+when_sorting_movies.setup.should_be_able_to_sort_all_movies_by_studio_rating_and_year_published.tear_down" result="failure" assert-count="0" duration="0.001" memory="8192"><invokers /><warnings /><asserts /><Description /><console-out /><console-error /><exception type="System.NotImplementedException"><properties><property name="TargetSite" value="System.Collections.Generic.IEnumerable`1[nothinbutdotnetprep.collections.Movie] sort_all_movies_by_movie_studio_and_year_published()" /><property name="HelpLink" value="null" /></properties><message>The method or operation is not implemented.</message><source>nothinbutdotnetprep</source><stack-trace>   at nothinbutdotnetprep.collections.MovieLibrary.sort_all_movies_by_movie_studio_and_year_published() in c:\course\prep\exercise_to_complete_for_day_1\product\nothinbutdotnetprep\collections\MovieLibrary.cs:line 44
   at nothinbutdotnetprep.tests.MovieLibrarySpecs.when_sorting_movies.&lt;.ctor&gt;b__45() in c:\course\prep\exercise_to_complete_for_day_1\product\nothinbutdotnetprep.tests\MovieLibrarySpecs.cs:line 316</stack-trace></exception></run></runs></fixture><fixture name="TypeCastingSpecs+when_asking_if_an_object_is_not_an_instance_of_a_specific_type" type="nothinbutdotnetprep.tests.TypeCastingSpecs+when_asking_if_an_object_is_not_an_instance_of_a_specific_type"><tear-down name="TestFixtureTearDown" result="success" duration="0" memory="0"><console-out /><console-error /></tear-down><set-up name="TestFixtureSetUp" result="success" duration="0" memory="0"><console-out /><console-error /></set-up><counter duration="0.149" run-count="2" success-count="2" failure-count="0" ignore-count="0" skip-count="0" assert-count="2" /><description /><runs><run name="TypeCastingSpecs+when_asking_if_an_object_is_not_an_instance_of_a_specific_type.setup.should_be_true_if_the_object_is_not_an_instance_of_the_specified_type.tear_down" result="success" assert-count="1" duration="0.148" memory="169584"><invokers /><warnings /><asserts /><Description /><console-out /><console-error /></run><run name="TypeCastingSpecs+when_asking_if_an_object_is_not_an_instance_of_a_specific_type.setup.should_be_false_if_the_object_is_an_instance_of_the_specified_type.tear_down" result="success" assert-count="1" duration="0.001" memory="0"><invokers /><warnings /><asserts /><Description /><console-out /><console-error /></run></runs></fixture><fixture name="MovieLibrarySpecs+when_counting_the_number_of_movies" type="nothinbutdotnetprep.tests.MovieLibrarySpecs+when_counting_the_number_of_movies"><tear-down name="TestFixtureTearDown" result="success" duration="0" memory="0"><console-out /><console-error /></tear-down><set-up name="TestFixtureSetUp" result="success" duration="0" memory="0"><console-out /><console-error /></set-up><counter duration="0.001" run-count="1" success-count="1" failure-count="0" ignore-count="0" skip-count="0" assert-count="1" /><description /><runs><run name="MovieLibrarySpecs+when_counting_the_number_of_movies.setup.should_return_the_number_of_all_movies_in_the_library.tear_down" result="success" assert-count="1" duration="0.001" memory="8192"><invokers /><warnings /><asserts /><Description /><console-out /><console-error /></run></runs></fixture><fixture name="MovieLibrarySpecs+when_adding_two_different_copies_of_the_same_movie" type="nothinbutdotnetprep.tests.MovieLibrarySpecs+when_adding_two_different_copies_of_the_same_movie"><tear-down name="TestFixtureTearDown" result="success" duration="0" memory="0"><console-out /><console-error /></tear-down><set-up name="TestFixtureSetUp" result="success" duration="0" memory="0"><console-out /><console-error /></set-up><counter duration="0.001" run-count="1" success-count="1" failure-count="0" ignore-count="0" skip-count="0" assert-count="1" /><description /><runs><run name="MovieLibrarySpecs+when_adding_two_different_copies_of_the_same_movie.setup.should_store_only_1_copy_in_the_collection.tear_down" result="success" assert-count="1" duration="0.001" memory="8192"><invokers /><warnings /><asserts /><Description /><console-out /><console-error /></run></runs></fixture><fixture name="TypeExtensionsSpecs+when_a_type_is_told_to_find_its_greediest_constructor" type="nothinbutdotnetprep.tests.TypeExtensionsSpecs+when_a_type_is_told_to_find_its_greediest_constructor"><tear-down name="TestFixtureTearDown" result="success" duration="0" memory="0"><console-out /><console-error /></tear-down><set-up name="TestFixtureSetUp" result="success" duration="0" memory="0"><console-out /><console-error /></set-up><counter duration="0.001" run-count="1" success-count="1" failure-count="0" ignore-count="0" skip-count="0" assert-count="1" /><description /><runs><run name="TypeExtensionsSpecs+when_a_type_is_told_to_find_its_greediest_constructor.setup.should_return_the_constructor_that_takes_the_most_arguments.tear_down" result="success" assert-count="1" duration="0.001" memory="8192"><invokers /><warnings /><asserts /><Description /><console-out /><console-error /></run></runs></fixture><fixture name="MovieLibrarySpecs+when_trying_to_change_the_set_of_movies_returned_by_the_movie_library_to_a_mutable_type" type="nothinbutdotnetprep.tests.MovieLibrarySpecs+when_trying_to_change_the_set_of_movies_returned_by_the_movie_library_to_a_mutable_type"><tear-down name="TestFixtureTearDown" result="success" duration="0" memory="0"><console-out /><console-error /></tear-down><set-up name="TestFixtureSetUp" result="success" duration="0" memory="0"><console-out /><console-error /></set-up><counter duration="0.003" run-count="1" success-count="0" failure-count="1" ignore-count="0" skip-count="0" assert-count="0" /><description /><runs><run name="MovieLibrarySpecs+when_trying_to_change_the_set_of_movies_returned_by_the_movie_library_to_a_mutable_type.setup.should_get_an_invalid_cast_exception.tear_down" result="failure" assert-count="0" duration="0.003" memory="16384"><invokers /><warnings /><asserts /><Description /><console-out /><console-error /><exception type="MbUnit.Core.Exceptions.AssertionException"><properties><property name="TargetSite" value="Void Fail(System.String)" /><property name="HelpLink" value="null" /></properties><message /><source>MbUnit.Framework</source><stack-trace>   at MbUnit.Framework.Assert.Fail(String message)
   at MbUnit.Framework.Assert.IsInstanceOfType(Type expected, Object actual)
   at developwithpassion.bdd.mbunit.AssertionExtensions.should_be_an_instance_of[Type](Object item) in C:\local\developwithpassion.bdd\product\developwithpassion.bdd\mbunit\AssertionExtensions.cs:line 40
   at nothinbutdotnetprep.tests.MovieLibrarySpecs.when_trying_to_change_the_set_of_movies_returned_by_the_movie_library_to_a_mutable_type.&lt;.ctor&gt;b__11() in c:\course\prep\exercise_to_complete_for_day_1\product\nothinbutdotnetprep.tests\MovieLibrarySpecs.cs:line 134</stack-trace></exception></run></runs></fixture><fixture name="StringExtensionsSpecs+when_the_string_extensions_formats_a_string_using_provided_arguments" type="nothinbutdotnetprep.tests.StringExtensionsSpecs+when_the_string_extensions_formats_a_string_using_provided_arguments"><tear-down name="TestFixtureTearDown" result="success" duration="0" memory="8192"><console-out /><console-error /></tear-down><set-up name="TestFixtureSetUp" result="success" duration="0" memory="0"><console-out /><console-error /></set-up><counter duration="0.001" run-count="1" success-count="1" failure-count="0" ignore-count="0" skip-count="0" assert-count="1" /><description /><runs><run name="StringExtensionsSpecs+when_the_string_extensions_formats_a_string_using_provided_arguments.setup.should_return_the_string_formatted_with_the_arguments.tear_down" result="success" assert-count="1" duration="0.001" memory="8192"><invokers /><warnings /><asserts /><Description /><console-out /><console-error /></run></runs></fixture><fixture name="MovieLibrarySpecs+when_asked_for_all_of_the_movies" type="nothinbutdotnetprep.tests.MovieLibrarySpecs+when_asked_for_all_of_the_movies"><tear-down name="TestFixtureTearDown" result="success" duration="0" memory="0"><console-out /><console-error /></tear-down><set-up name="TestFixtureSetUp" result="success" duration="0" memory="0"><console-out /><console-error /></set-up><counter duration="0.003" run-count="1" success-count="1" failure-count="0" ignore-count="0" skip-count="0" assert-count="3" /><description /><runs><run name="MovieLibrarySpecs+when_asked_for_all_of_the_movies.setup.should_receive_a_set_containing_each_movie_in_the_library.tear_down" result="success" assert-count="3" duration="0.003" memory="8192"><invokers /><warnings /><asserts /><Description /><console-out /><console-error /></run></runs></fixture><fixture name="MovieLibrarySpecs+when_searching_for_movies" type="nothinbutdotnetprep.tests.MovieLibrarySpecs+when_searching_for_movies"><tear-down name="TestFixtureTearDown" result="success" duration="0" memory="0"><console-out /><console-error /></tear-down><set-up name="TestFixtureSetUp" result="success" duration="0" memory="0"><console-out /><console-error /></set-up><counter duration="0.011" run-count="7" success-count="6" failure-count="1" ignore-count="0" skip-count="0" assert-count="21" /><description /><runs><run name="MovieLibrarySpecs+when_searching_for_movies.setup.should_be_able_to_find_all_movies_published_by_pixar.tear_down" result="success" assert-count="3" duration="0.003" memory="8192"><invokers /><warnings /><asserts /><Description /><console-out /><console-error /></run><run name="MovieLibrarySpecs+when_searching_for_movies.setup.should_be_able_to_find_all_movies_published_by_pixar_or_disney.tear_down" result="success" assert-count="4" duration="0.001" memory="8192"><invokers /><warnings /><asserts /><Description /><console-out /><console-error /></run><run name="MovieLibrarySpecs+when_searching_for_movies.setup.should_be_able_to_find_all_movies_not_published_by_pixar.tear_down" result="success" assert-count="2" duration="0.003" memory="8192"><invokers /><warnings /><asserts /><Description /><console-out /><console-error /></run><run name="MovieLibrarySpecs+when_searching_for_movies.setup.should_be_able_to_find_all_movies_published_after_a_certain_year.tear_down" result="success" assert-count="4" duration="0" memory="8192"><invokers /><warnings /><asserts /><Description /><console-out /><console-error /></run><run name="MovieLibrarySpecs+when_searching_for_movies.setup.should_be_able_to_find_all_movies_published_between_a_certain_range_of_years.tear_down" result="failure" assert-count="1" duration="0.003" memory="8192"><invokers /><warnings /><asserts /><Description /><console-out /><console-error /><exception type="MbUnit.Core.Exceptions.NotEqualAssertionException"><properties><property name="TargetSite" value="Void FailNotEquals(System.Object, System.Object, System.String, System.Object[])" /><property name="HelpLink" value="null" /></properties><message> Equal assertion failed: [[2]]!=[[3]]</message><source>MbUnit.Framework</source><stack-trace>   at MbUnit.Framework.Assert.FailNotEquals(Object expected, Object actual, String format, Object[] args)
   at MbUnit.Framework.Assert.AreEqual(Object expected, Object actual, String message)
   at MbUnit.Framework.Assert.AreEqual(Object expected, Object actual)
   at developwithpassion.bdd.mbunit.ComparisonAssertionExtensions.should_be_equal_to[T](T actual, T expected) in C:\local\developwithpassion.bdd\product\developwithpassion.bdd\mbunit\ComparisonAssertionExtensions.cs:line 35
   at developwithpassion.bdd.mbunit.EnumerableAssertionExtensions.should_only_contain[T](IEnumerable`1 items, T[] itemsToFind) in C:\local\developwithpassion.bdd\product\developwithpassion.bdd\mbunit\EnumerableAssertionExtensions.cs:line 45
   at nothinbutdotnetprep.tests.MovieLibrarySpecs.when_searching_for_movies.&lt;.ctor&gt;b__37() in c:\course\prep\exercise_to_complete_for_day_1\product\nothinbutdotnetprep.tests\MovieLibrarySpecs.cs:line 248</stack-trace></exception></run><run name="MovieLibrarySpecs+when_searching_for_movies.setup.should_be_able_to_find_all_kid_movies.tear_down" result="success" assert-count="4" duration="0.001" memory="8192"><invokers /><warnings /><asserts /><Description /><console-out /><console-error /></run><run name="MovieLibrarySpecs+when_searching_for_movies.setup.should_be_able_to_find_all_action_movies.tear_down" result="success" assert-count="3" duration="0" memory="8192"><invokers /><warnings /><asserts /><Description /><console-out /><console-error /></run></runs></fixture><fixture name="MovieLibrarySpecs+when_adding_an_existing_movie_in_the_collection_again" type="nothinbutdotnetprep.tests.MovieLibrarySpecs+when_adding_an_existing_movie_in_the_collection_again"><tear-down name="TestFixtureTearDown" result="success" duration="0" memory="0"><console-out /><console-error /></tear-down><set-up name="TestFixtureSetUp" result="success" duration="0" memory="0"><console-out /><console-error /></set-up><counter duration="0.001" run-count="1" success-count="1" failure-count="0" ignore-count="0" skip-count="0" assert-count="1" /><description /><runs><run name="MovieLibrarySpecs+when_adding_an_existing_movie_in_the_collection_again.setup.should_not_restore_the_movie_in_the_collection.tear_down" result="success" assert-count="1" duration="0.001" memory="8192"><invokers /><warnings /><asserts /><Description /><console-out /><console-error /></run></runs></fixture><fixture name="TypeCastingSpecs+when_a_legitimate_downcast_is_made" type="nothinbutdotnetprep.tests.TypeCastingSpecs+when_a_legitimate_downcast_is_made"><tear-down name="TestFixtureTearDown" result="success" duration="0" memory="0"><console-out /><console-error /></tear-down><set-up name="TestFixtureSetUp" result="success" duration="0" memory="0"><console-out /><console-error /></set-up><counter duration="0" run-count="1" success-count="1" failure-count="0" ignore-count="0" skip-count="0" assert-count="0" /><description /><runs><run name="TypeCastingSpecs+when_a_legitimate_downcast_is_made.setup.should_retrieve_the_object_back_downcasted_to_the_target_type.tear_down" result="success" assert-count="0" duration="0" memory="8192"><invokers /><warnings /><asserts /><Description /><console-out /><console-error /></run></runs></fixture><fixture name="IterationSpecs+when_iterating_through_a_range_of_numbers" type="nothinbutdotnetprep.tests.IterationSpecs+when_iterating_through_a_range_of_numbers"><tear-down name="TestFixtureTearDown" result="success" duration="0" memory="8192"><console-out /><console-error /></tear-down><set-up name="TestFixtureSetUp" result="success" duration="0" memory="0"><console-out /><console-error /></set-up><counter duration="0.002" run-count="1" success-count="1" failure-count="0" ignore-count="0" skip-count="0" assert-count="1" /><description /><runs><run name="IterationSpecs+when_iterating_through_a_range_of_numbers.setup.should_visit_all_numbers.tear_down" result="success" assert-count="1" duration="0.002" memory="8192"><invokers /><warnings /><asserts /><Description /><console-out /><console-error /></run></runs></fixture><fixture name="MovieLibrarySpecs+when_adding_a_movie_to_the_library" type="nothinbutdotnetprep.tests.MovieLibrarySpecs+when_adding_a_movie_to_the_library"><tear-down name="TestFixtureTearDown" result="success" duration="0" memory="0"><console-out /><console-error /></tear-down><set-up name="TestFixtureSetUp" result="success" duration="0" memory="0"><console-out /><console-error /></set-up><counter duration="0.001" run-count="1" success-count="1" failure-count="0" ignore-count="0" skip-count="0" assert-count="2" /><description /><runs><run name="MovieLibrarySpecs+when_adding_a_movie_to_the_library.setup.should_store_it_in_the_movie_collection.tear_down" result="success" assert-count="2" duration="0.001" memory="8192"><invokers /><warnings /><asserts /><Description /><console-out /><console-error /></run></runs></fixture></fixtures></namespace></namespaces><fixtures /></namespace></namespaces></assembly></assemblies></report-result>